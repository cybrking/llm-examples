import streamlit as st
import requests
from urllib.parse import urlparse
import pandas as pd

def check_http_headers(url):
    try:
        response = requests.head(url, allow_redirects=True)
        headers = response.headers
        checks = [
            ("X-Frame-Options", headers.get("X-Frame-Options"), "Protects against clickjacking attacks"),
            ("X-XSS-Protection", headers.get("X-XSS-Protection"), "Enables browser's built-in XSS protection"),
            ("X-Content-Type-Options", headers.get("X-Content-Type-Options"), "Prevents MIME type sniffing"),
            ("Strict-Transport-Security", headers.get("Strict-Transport-Security"), "Enforces HTTPS connections"),
            ("Content-Security-Policy", headers.get("Content-Security-Policy"), "Mitigates various attacks including XSS and injection attacks"),
            ("Referrer-Policy", headers.get("Referrer-Policy"), "Controls how much referrer information should be included with requests"),
            ("Permissions-Policy", headers.get("Permissions-Policy"), "Allows/disallows browser features and APIs"),
        ]
        return checks
    except requests.RequestException as e:
        return [("Error", str(e), "Failed to retrieve headers")]

def get_status_and_description(header, value):
    if header == "X-Frame-Options":
        if value and value.upper() in ["DENY", "SAMEORIGIN"]:
            return "‚úÖ Set", value
        elif value:
            return "‚ö†Ô∏è Incorrect", f"Value should be DENY or SAMEORIGIN, current value: {value}"
        else:
            return "‚ùå Not Set", "Header is missing"
    elif header == "X-XSS-Protection":
        if value == "1; mode=block":
            return "‚úÖ Set", value
        elif value:
            return "‚ö†Ô∏è Incorrect", f"Value should be '1; mode=block', current value: {value}"
        else:
            return "‚ùå Not Set", "Header is missing"
    elif header in ["X-Content-Type-Options", "Strict-Transport-Security", "Content-Security-Policy", "Referrer-Policy", "Permissions-Policy"]:
        if value:
            return "‚úÖ Set", value
        else:
            return "‚ùå Not Set", "Header is missing"
    else:
        return "Unknown", "Unknown header"

def main():
    st.set_page_config(page_title="SecureHeaderScan", page_icon="üõ°Ô∏è", layout="wide")

    st.title("üõ°Ô∏è SecureHeaderScan")

    url = st.text_input("Enter a URL to check:", placeholder="https://example.com")
    if st.button("Scan", key="scan_button"):
        if url:
            with st.spinner("Analyzing HTTP headers..."):
                header_checks = check_http_headers(url)
                
                st.markdown("## HTTP Security Headers Results")
                
                table_data = []
                for header, value, description in header_checks:
                    status, status_description = get_status_and_description(header, value)
                    table_data.append({
                        "Header": header,
                        "Status": status,
                        "Description": description,
                        "Value": status_description
                    })
                
                df = pd.DataFrame(table_data)
                
                # Custom CSS to style the table
                st.markdown("""
                <style>
                    .dataframe {
                        font-size: 14px;
                        text-align: left;
                    }
                    .dataframe th {
                        background-color: #f0f2f6;
                        font-weight: bold;
                        padding: 10px;
                    }
                    .dataframe td {
                        padding: 10px;
                    }
                    .dataframe tr:nth-child(even) {
                        background-color: #f9f9f9;
                    }
                </style>
                """, unsafe_allow_html=True)
                
                st.table(df)

                # Calculate and display the security score
                security_score = sum(1 for row in table_data if row['Status'].startswith("‚úÖ")) / len(table_data) * 100
                st.markdown(f"## Overall Security Score: {security_score:.2f}%")
                st.progress(security_score / 100)

        else:
            st.error("Please enter a valid URL")

    st.markdown("""
    ---
    **Disclaimer:** SecureHeaderScan is for educational purposes only. 
    Always obtain explicit permission before scanning websites you do not own or operate.
    """)

if __name__ == "__main__":
    main()